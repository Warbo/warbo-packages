diff -ur hydra-orig/release.nix hydra-src/release.nix
--- hydra-orig/release.nix	2018-02-12 21:57:20.629277705 +0000
+++ hydra-src/release.nix	2018-02-12 22:02:41.631869405 +0000
@@ -91,7 +91,6 @@
             JSONXS
             LWP
             LWPProtocolHttps
-            NetAmazonS3
             NetStatsd
             PadWalker
             Readonly
@@ -120,17 +119,6 @@
           guile # optional, for Guile + Guix support
           perlDeps perl
           postgresql92 # for running the tests
-          (lib.overrideDerivation (aws-sdk-cpp.override {
-            apis = ["s3"];
-            customMemoryManagement = false;
-          }) (attrs: {
-            src = fetchFromGitHub {
-              owner = "edolstra";
-              repo = "aws-sdk-cpp";
-              rev = "local";
-              sha256 = "1vhgsxkhpai9a7dk38q4r239l6dsz2jvl8hii24c194lsga3g84h";
-            };
-          }))
         ];
 
       hydraPath = lib.makeSearchPath "bin" (
@@ -223,45 +211,4 @@
           $machine->mustSucceed("su - hydra -c 'perl ${./tests/api-test.pl}' >&2");
         '';
   });
-
-  /*
-  tests.s3backup = genAttrs' (system:
-    with import <nixpkgs/nixos/lib/testing.nix> { inherit system; };
-    let hydra = build.${system}
-    simpleTest {
-      machine =
-        { config, pkgs, ... }:
-        { services.postgresql.enable = true;
-          services.postgresql.package = pkgs.postgresql92;
-          environment.systemPackages = [ hydra pkgs.rubyLibs.fakes3 ];
-          virtualisation.memorySize = 2047;
-          boot.kernelPackages = pkgs.linuxPackages_3_10;
-          virtualisation.writableStore = true;
-          networking.extraHosts = ''
-            127.0.0.1 hydra.s3.amazonaws.com
-          '';
-        };
-
-      testScript =
-        ''
-          $machine->waitForJob("postgresql");
-
-          # Initialise the database and the state.
-          $machine->succeed
-              ( "createdb -O root hydra"
-              , "psql hydra -f ${hydra}/libexec/hydra/sql/hydra-postgresql.sql"
-              , "mkdir /var/lib/hydra"
-              , "mkdir /tmp/jobs"
-              , "cp ${./tests/s3-backup-test.pl} /tmp/s3-backup-test.pl"
-              , "cp ${./tests/api-test.nix} /tmp/jobs/default.nix"
-              );
-
-          # start fakes3
-          $machine->succeed("fakes3 --root /tmp/s3 --port 80 &>/dev/null &");
-          $machine->waitForOpenPort("80");
-
-          $machine->succeed("cd /tmp && LOGNAME=root AWS_ACCESS_KEY_ID=foo AWS_SECRET_ACCESS_KEY=bar HYDRA_DBI='dbi:Pg:dbname=hydra;user=root;' HYDRA_CONFIG=${./tests/s3-backup-test.config} perl -I ${hydra}/libexec/hydra/lib -I ${hydra.perlDeps}/lib/perl5/site_perl ./s3-backup-test.pl >&2");
-        '';
-  });
-  */
 }
diff -ur hydra-orig/src/hydra-queue-runner/hydra-queue-runner.cc hydra-src/src/hydra-queue-runner/hydra-queue-runner.cc
--- hydra-orig/src/hydra-queue-runner/hydra-queue-runner.cc	2018-02-12 21:57:20.632278150 +0000
+++ hydra-src/src/hydra-queue-runner/hydra-queue-runner.cc	2018-02-12 22:02:01.922982188 +0000
@@ -7,7 +7,6 @@
 
 #include "state.hh"
 #include "build-result.hh"
-#include "s3-binary-cache-store.hh"
 
 #include "shared.hh"
 #include "globals.hh"
@@ -629,61 +628,6 @@
                     nested2.attr("lastActive", std::chrono::system_clock::to_time_t(i.second.lastActive));
             }
         }
-
-        auto store = dynamic_cast<S3BinaryCacheStore *>(&*getDestStore());
-
-        if (store) {
-            root.attr("store");
-            JSONObject nested(out);
-
-            auto & stats = store->getStats();
-            nested.attr("narInfoRead", stats.narInfoRead);
-            nested.attr("narInfoReadAverted", stats.narInfoReadAverted);
-            nested.attr("narInfoWrite", stats.narInfoWrite);
-            nested.attr("narInfoCacheSize", stats.narInfoCacheSize);
-            nested.attr("narRead", stats.narRead);
-            nested.attr("narReadBytes", stats.narReadBytes);
-            nested.attr("narReadCompressedBytes", stats.narReadCompressedBytes);
-            nested.attr("narWrite", stats.narWrite);
-            nested.attr("narWriteAverted", stats.narWriteAverted);
-            nested.attr("narWriteBytes", stats.narWriteBytes);
-            nested.attr("narWriteCompressedBytes", stats.narWriteCompressedBytes);
-            nested.attr("narWriteCompressionTimeMs", stats.narWriteCompressionTimeMs);
-            nested.attr("narCompressionSavings",
-                stats.narWriteBytes
-                ? 1.0 - (double) stats.narWriteCompressedBytes / stats.narWriteBytes
-                : 0.0);
-            nested.attr("narCompressionSpeed", // MiB/s
-                stats.narWriteCompressionTimeMs
-                ? (double) stats.narWriteBytes / stats.narWriteCompressionTimeMs * 1000.0 / (1024.0 * 1024.0)
-                : 0.0);
-
-            auto s3Store = dynamic_cast<S3BinaryCacheStore *>(&*store);
-            if (s3Store) {
-                nested.attr("s3");
-                JSONObject nested2(out);
-                auto & s3Stats = s3Store->getS3Stats();
-                nested2.attr("put", s3Stats.put);
-                nested2.attr("putBytes", s3Stats.putBytes);
-                nested2.attr("putTimeMs", s3Stats.putTimeMs);
-                nested2.attr("putSpeed",
-                    s3Stats.putTimeMs
-                    ? (double) s3Stats.putBytes / s3Stats.putTimeMs * 1000.0 / (1024.0 * 1024.0)
-                    : 0.0);
-                nested2.attr("get", s3Stats.get);
-                nested2.attr("getBytes", s3Stats.getBytes);
-                nested2.attr("getTimeMs", s3Stats.getTimeMs);
-                nested2.attr("getSpeed",
-                    s3Stats.getTimeMs
-                    ? (double) s3Stats.getBytes / s3Stats.getTimeMs * 1000.0 / (1024.0 * 1024.0)
-                    : 0.0);
-                nested2.attr("head", s3Stats.head);
-                nested2.attr("costDollarApprox",
-                    (s3Stats.get + s3Stats.head) / 10000.0 * 0.004
-                    + s3Stats.put / 1000.0 * 0.005 +
-                    + s3Stats.getBytes / (1024.0 * 1024.0 * 1024.0) * 0.09);
-            }
-        }
     }
 
     if (log && time(0) >= lastStatusLogged + statusLogInterval) {
@@ -794,18 +738,6 @@
             dir);
     }
 
-    else if (storeMode == "s3-binary-cache") {
-        auto bucketName = hydraConfig["binary_cache_s3_bucket"];
-        if (bucketName == "")
-            throw Error("you must set ‘binary_cache_s3_bucket’ in hydra.conf");
-        auto store = make_ref<S3BinaryCacheStore>(
-            _localStore,
-            hydraConfig["binary_cache_secret_key_file"],
-            bucketName);
-        store->init();
-        _destStore = std::shared_ptr<S3BinaryCacheStore>(store);
-    }
-
     {
         auto conn(dbPool.get());
         clearBusy(*conn, 0);
diff -ur hydra-orig/src/hydra-queue-runner/Makefile.am hydra-src/src/hydra-queue-runner/Makefile.am
--- hydra-orig/src/hydra-queue-runner/Makefile.am	2018-02-12 21:57:20.631278002 +0000
+++ hydra-src/src/hydra-queue-runner/Makefile.am	2018-02-12 21:50:51.886642733 +0000
@@ -3,8 +3,7 @@
 hydra_queue_runner_SOURCES = hydra-queue-runner.cc queue-monitor.cc dispatcher.cc \
  builder.cc build-result.cc build-remote.cc  \
  build-result.hh counter.hh token-server.hh state.hh db.hh \
- s3-binary-cache-store.hh s3-binary-cache-store.cc \
  finally.hh
 hydra_queue_runner_LDADD = $(NIX_LIBS) -lpqxx
 
-AM_CXXFLAGS = $(NIX_CFLAGS) -Wall -laws-cpp-sdk-s3
+AM_CXXFLAGS = $(NIX_CFLAGS) -Wall
Only in hydra-orig/src/hydra-queue-runner: s3-binary-cache-store.cc
Only in hydra-orig/src/hydra-queue-runner: s3-binary-cache-store.hh
diff -ur hydra-orig/src/lib/Hydra/Controller/Build.pm hydra-src/src/lib/Hydra/Controller/Build.pm
--- hydra-orig/src/lib/Hydra/Controller/Build.pm	2018-02-12 21:57:20.634278446 +0000
+++ hydra-src/src/lib/Hydra/Controller/Build.pm	2018-02-12 21:50:34.919127124 +0000
@@ -237,7 +237,6 @@
             if $storeMode eq "direct";
         my $url =
             $storeMode eq "local-binary-cache" ? "file://" . $c->config->{binary_cache_dir} :
-            $storeMode eq "s3-binary-cache" ? "https://" . $c->config->{binary_cache_s3_bucket} . ".s3.amazonaws.com/" :
             die;
         my $args = "";
         if (defined $c->config->{binary_cache_public_key_file}
diff -ur hydra-orig/src/lib/Hydra/Controller/Root.pm hydra-src/src/lib/Hydra/Controller/Root.pm
--- hydra-orig/src/lib/Hydra/Controller/Root.pm	2018-02-12 21:57:20.634278446 +0000
+++ hydra-src/src/lib/Hydra/Controller/Root.pm	2018-02-12 22:00:59.029657656 +0000
@@ -279,11 +279,7 @@
 
     my $storeMode = $c->config->{store_mode} // "direct";
 
-    if ($storeMode eq "s3-binary-cache") {
-        notFound($c, "There is no binary cache here.");
-    }
-
-    elsif ($storeMode eq "local-binary-cache") {
+    if ($storeMode eq "local-binary-cache") {
         my $dir = $c->config->{binary_cache_dir};
         $c->serve_static_file($dir . "/nar/" . $path);
     }
@@ -304,11 +300,7 @@
 
     my $storeMode = $c->config->{store_mode} // "direct";
 
-    if ($storeMode eq "s3-binary-cache") {
-        notFound($c, "There is no binary cache here.");
-    }
-
-    elsif ($storeMode eq "local-binary-cache") {
+    if ($storeMode eq "local-binary-cache") {
         my $dir = $c->config->{binary_cache_dir};
         $c->serve_static_file($dir . "/nix-cache-info");
     }
@@ -332,11 +324,7 @@
 
     my $storeMode = $c->config->{store_mode} // "direct";
 
-    if ($storeMode eq "s3-binary-cache") {
-        notFound($c, "There is no binary cache here.");
-    }
-
-    elsif ($storeMode eq "local-binary-cache") {
+    if ($storeMode eq "local-binary-cache") {
         my $dir = $c->config->{binary_cache_dir};
         $c->serve_static_file($dir . "/" . $c->req->captures->[0] . ".narinfo");
     }
Only in hydra-orig/src/lib/Hydra/Plugin: S3Backup.pm
diff -ur hydra-orig/src/lib/Hydra/View/NixPkg.pm hydra-src/src/lib/Hydra/View/NixPkg.pm
--- hydra-orig/src/lib/Hydra/View/NixPkg.pm	2018-02-12 21:57:20.639279188 +0000
+++ hydra-src/src/lib/Hydra/View/NixPkg.pm	2018-02-12 21:50:13.792994955 +0000
@@ -13,8 +13,6 @@
     my $storeMode = $c->config->{store_mode} // "direct";
     my $channelUri =
         $storeMode eq "direct" ? $c->uri_for('/')
-        : $storeMode eq "s3-binary-cache" ?
-          ($c->config->{binary_cache_public_uri} // ("https://" . $c->config->{binary_cache_s3_bucket} . ".s3.amazonaws.com/"))
         : die "Not supported.\n";
 
     # FIXME: add multiple output support
Only in hydra-orig/src/script: hydra-s3-backup-collect-garbage
diff -ur hydra-orig/src/script/Makefile.am hydra-src/src/script/Makefile.am
--- hydra-orig/src/script/Makefile.am	2018-02-12 21:57:20.655281560 +0000
+++ hydra-src/src/script/Makefile.am	2018-02-12 21:59:29.927447404 +0000
@@ -7,7 +7,6 @@
   hydra-evaluator				\
   hydra-server					\
   hydra-update-gc-roots				\
-  hydra-s3-backup-collect-garbage		\
   hydra-create-user				\
   hydra-notify					\
   hydra-send-stats				\
Only in hydra-orig/tests: s3-backup-test.config
Only in hydra-orig/tests: s3-backup-test.pl
